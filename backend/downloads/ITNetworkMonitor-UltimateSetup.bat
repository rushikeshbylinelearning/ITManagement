@echo off
echo ========================================
echo IT Network Monitor Agent - Ultimate Setup
echo ========================================
echo.

REM Check if running as administrator
net session >nul 2>&1
if %errorLevel% == 0 (
    echo ✓ Running with administrator privileges
) else (
    echo ✗ This script requires administrator privileges
    echo Please right-click and select "Run as administrator"
    pause
    exit /b 1
)

echo.
echo Installing IT Network Monitor Agent...
echo.

REM Check if Python is installed
python --version >nul 2>&1
if %errorLevel% == 0 (
    echo ✓ Python is installed
) else (
    echo ✗ Python is not installed or not in PATH
    echo Please install Python 3.7+ from https://python.org
    echo Make sure to check "Add Python to PATH" during installation
    pause
    exit /b 1
)

REM Create installation directory
set INSTALL_DIR=%ProgramFiles%\ITNetworkMonitor
echo Creating installation directory: %INSTALL_DIR%
mkdir "%INSTALL_DIR%" 2>nul

REM Create the agent file using a simple approach
echo Creating network monitor agent...
echo #!/usr/bin/env python3 > "%INSTALL_DIR%\network_monitor_agent.py"
echo """ >> "%INSTALL_DIR%\network_monitor_agent.py"
echo IT Management Network Monitoring Agent >> "%INSTALL_DIR%\network_monitor_agent.py"
echo Version: 1.0.0 >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo This agent monitors network traffic on Windows systems and reports to the IT Management backend. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo It runs as a background service and automatically starts on system boot. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo """ >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo import os >> "%INSTALL_DIR%\network_monitor_agent.py"
echo import sys >> "%INSTALL_DIR%\network_monitor_agent.py"
echo import time >> "%INSTALL_DIR%\network_monitor_agent.py"
echo import json >> "%INSTALL_DIR%\network_monitor_agent.py"
echo import socket >> "%INSTALL_DIR%\network_monitor_agent.py"
echo import requests >> "%INSTALL_DIR%\network_monitor_agent.py"
echo import threading >> "%INSTALL_DIR%\network_monitor_agent.py"
echo from datetime import datetime >> "%INSTALL_DIR%\network_monitor_agent.py"
echo from collections import defaultdict >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo try: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo     import psutil >> "%INSTALL_DIR%\network_monitor_agent.py"
echo except ImportError: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo     print("ERROR: psutil is not installed. Installing now...") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo     import subprocess >> "%INSTALL_DIR%\network_monitor_agent.py"
echo     subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'psutil']) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo     import psutil >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo # Configuration >> "%INSTALL_DIR%\network_monitor_agent.py"
echo AGENT_VERSION = "1.0.0" >> "%INSTALL_DIR%\network_monitor_agent.py"
echo CONFIG_FILE = os.path.join(os.path.expanduser("~"), ".it_monitor", "config.json") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo LOG_FILE = os.path.join(os.path.expanduser("~"), ".it_monitor", "agent.log") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo BACKEND_URL = "https://itmanagement.bylinelms.com/api" >> "%INSTALL_DIR%\network_monitor_agent.py"
echo UPDATE_INTERVAL = 10 >> "%INSTALL_DIR%\network_monitor_agent.py"
echo HEARTBEAT_INTERVAL = 60 >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo class NetworkMonitorAgent: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo     def __init__(self): >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         self.system_id = None >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         self.system_name = None >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         self.agent_token = None >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         self.backend_url = BACKEND_URL >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         self.is_running = True >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         self.network_stats = defaultdict(lambda: {'upload': 0, 'download': 0, 'count': 0}) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         self.last_net_io = None >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         self.session = requests.Session() >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         # Domain mapping for better service identification >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         self.domain_mapping = { >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             'facebook.com': 'Facebook', 'instagram.com': 'Instagram', 'twitter.com': 'Twitter', >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             'linkedin.com': 'LinkedIn', 'tiktok.com': 'TikTok', 'snapchat.com': 'Snapchat', >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             'youtube.com': 'YouTube', 'vimeo.com': 'Vimeo', 'twitch.tv': 'Twitch', >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             'netflix.com': 'Netflix', 'hulu.com': 'Hulu', 'disney.com': 'Disney+', >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             'amazon.com': 'Amazon Prime', 'zoom.us': 'Zoom', 'teams.microsoft.com': 'Microsoft Teams', >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             'meet.google.com': 'Google Meet', 'webex.com': 'Webex', 'slack.com': 'Slack', >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             'discord.com': 'Discord', 'whatsapp.com': 'WhatsApp', 'telegram.org': 'Telegram', >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             'office.com': 'Microsoft Office', 'google.com': 'Google Services', >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             'docs.google.com': 'Google Docs', 'drive.google.com': 'Google Drive', >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             'dropbox.com': 'Dropbox', 'onedrive.live.com': 'OneDrive', 'notion.so': 'Notion', >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             'trello.com': 'Trello', 'asana.com': 'Asana', 'github.com': 'GitHub', >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             'gitlab.com': 'GitLab', 'bitbucket.org': 'Bitbucket', 'stackoverflow.com': 'Stack Overflow', >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             'stackexchange.com': 'Stack Exchange', 'dev.to': 'Dev.to', 'medium.com': 'Medium', >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             'cnn.com': 'CNN', 'bbc.com': 'BBC', 'reuters.com': 'Reuters', 'nytimes.com': 'New York Times', >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             'washingtonpost.com': 'Washington Post', 'theguardian.com': 'The Guardian', >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             'reddit.com': 'Reddit', 'amazon.com': 'Amazon', 'ebay.com': 'eBay', >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             'shopify.com': 'Shopify', 'paypal.com': 'PayPal', 'stripe.com': 'Stripe', >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             'aws.amazon.com': 'Amazon Web Services', 'azure.microsoft.com': 'Microsoft Azure', >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             'cloud.google.com': 'Google Cloud', 'digitalocean.com': 'DigitalOcean', >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             'linode.com': 'Linode', 'spotify.com': 'Spotify', 'apple.com': 'Apple Services', >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             'adobe.com': 'Adobe', 'salesforce.com': 'Salesforce', 'hubspot.com': 'HubSpot', >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             'mailchimp.com': 'Mailchimp' >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         } >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         # Ensure config directory exists >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         os.makedirs(os.path.dirname(CONFIG_FILE), exist_ok=True) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         os.makedirs(os.path.dirname(LOG_FILE), exist_ok=True) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         # Load or create configuration >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         self.load_config() >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo     def log(self, message): >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         timestamp = datetime.now().strftime("%%Y-%%m-%%d %%H:%%M:%%S") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         log_message = f"[{timestamp}] {message}" >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         print(log_message) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         try: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             with open(LOG_FILE, 'a', encoding='utf-8') as f: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 f.write(log_message + "\n") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         except Exception as e: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             print(f"Failed to write to log file: {e}") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo     def load_config(self): >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         if os.path.exists(CONFIG_FILE): >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             try: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 with open(CONFIG_FILE, 'r') as f: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     config = json.load(f) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     self.system_id = config.get('system_id') >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     self.system_name = config.get('system_name') >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     self.agent_token = config.get('agent_token') >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     self.backend_url = config.get('backend_url', BACKEND_URL) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     self.log(f"Configuration loaded for system: {self.system_name}") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             except Exception as e: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 self.log(f"Error loading config: {e}") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 self.create_new_config() >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         else: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             self.create_new_config() >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo     def create_new_config(self): >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         import uuid >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         self.system_name = socket.gethostname() >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         self.system_id = f"sys-{uuid.uuid4().hex[:12]}" >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         self.log(f"Created new system ID: {self.system_id}") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo     def save_config(self): >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         config = { >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             'system_id': self.system_id, >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             'system_name': self.system_name, >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             'agent_token': self.agent_token, >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             'backend_url': self.backend_url, >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             'agent_version': AGENT_VERSION >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         } >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         try: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             with open(CONFIG_FILE, 'w') as f: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 json.dump(config, f, indent=2) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             self.log("Configuration saved successfully") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         except Exception as e: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             self.log(f"Error saving config: {e}") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo     def set_token(self, token): >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         self.agent_token = token >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         self.save_config() >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         self.log("Agent token configured successfully") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo     def get_network_connections(self): >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         connections = [] >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         try: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             for conn in psutil.net_connections(kind='inet'): >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 if conn.status == 'ESTABLISHED' and conn.raddr: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     connections.append({ >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                         'local': f"{conn.laddr.ip}:{conn.laddr.port}", >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                         'remote': f"{conn.raddr.ip}:{conn.raddr.port}", >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                         'pid': conn.pid >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     }) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         except Exception as e: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             self.log(f"Error getting connections: {e}") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         return connections >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo     def resolve_ip_to_domain(self, ip): >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         try: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             if self.is_private_ip(ip): >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 return ip >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             domain = socket.gethostbyaddr(ip)[0] >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             domain = domain.lower().strip() >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             if self.is_ip_like(domain): >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 return ip >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             parts = domain.split('.') >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             if len(parts) ^>= 2: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 main_domain = '.'.join(parts[-2:]) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 cdn_domains = [ >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     'amazonaws.com', 'cloudfront.net', 'akamai.net', 'fastly.com', >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     'cloudflare.com', 'maxcdn.com', 'jsdelivr.net', 'unpkg.com', >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     'cdnjs.com', 'googleapis.com', 'gstatic.com', 'googleusercontent.com', >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     'linodeusercontent.com', 'digitaloceanspaces.com', 'azureedge.net' >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 ] >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 if main_domain in cdn_domains: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     if len(parts) ^>= 3: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                         subdomain = parts[0] >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                         service_indicators = ['api', 'www', 'app', 'service', 'cdn', 'static', 'assets'] >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                         if subdomain not in service_indicators: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                             return f"{subdomain}.{main_domain}" >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     return main_domain >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 friendly_name = self.domain_mapping.get(main_domain) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 if friendly_name: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     return friendly_name >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 return main_domain >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             return domain >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         except Exception as e: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             self.log(f"DNS resolution failed for {ip}: {e}") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             return ip >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo     def is_private_ip(self, ip): >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         try: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             import ipaddress >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             return ipaddress.ip_address(ip).is_private >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         except: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             private_ranges = [ >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 '10.', '172.16.', '172.17.', '172.18.', '172.19.', >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 '172.20.', '172.21.', '172.22.', '172.23.', '172.24.', >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 '172.25.', '172.26.', '172.27.', '172.28.', '172.29.', >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 '172.30.', '172.31.', '192.168.', '127.', '169.254.' >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             ] >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             return any(ip.startswith(prefix) for prefix in private_ranges) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo     def is_ip_like(self, domain): >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         try: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             socket.inet_aton(domain) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             return True >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         except: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             if domain.count('.') ^>= 2 and sum(c.isdigit() for c in domain) ^> len(domain) * 0.5: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 return True >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             return False >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo     def monitor_network_traffic(self): >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         try: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             net_io = psutil.net_io_counters() >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             if self.last_net_io is None: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 self.last_net_io = net_io >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 return >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             bytes_sent = net_io.bytes_sent - self.last_net_io.bytes_sent >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             bytes_recv = net_io.bytes_recv - self.last_net_io.bytes_recv >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             upload_mb = bytes_sent / (1024 * 1024) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             download_mb = bytes_recv / (1024 * 1024) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             connections = self.get_network_connections() >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             domain_usage = defaultdict(lambda: {'upload': 0, 'download': 0, 'count': 0}) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             if connections: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 upload_per_conn = upload_mb / len(connections) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 download_per_conn = download_mb / len(connections) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 for conn in connections: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     try: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                         remote_ip = conn['remote'].split(':')[0] >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                         domain = self.resolve_ip_to_domain(remote_ip) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                         domain_usage[domain]['upload'] += upload_per_conn >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                         domain_usage[domain]['download'] += download_per_conn >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                         domain_usage[domain]['count'] += 1 >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     except: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                         pass >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             for domain, usage in domain_usage.items(): >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 self.network_stats[domain]['upload'] += usage['upload'] >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 self.network_stats[domain]['download'] += usage['download'] >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 self.network_stats[domain]['count'] += usage['count'] >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             self.last_net_io = net_io >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         except Exception as e: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             self.log(f"Error monitoring network: {e}") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo     def send_data_to_backend(self): >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         if not self.agent_token: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             self.log("No agent token configured. Please register this agent.") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             return False >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         try: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             websites = [] >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             for domain, stats in self.network_stats.items(): >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 total_data = stats['upload'] + stats['download'] >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 if total_data ^> 0: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     websites.append({ >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                         'domain': domain, >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                         'dataUsedMB': round(total_data, 2), >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                         'uploadMB': round(stats['upload'], 2), >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                         'downloadMB': round(stats['download'], 2), >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                         'requestCount': int(stats['count']) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     }) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             total_upload = sum(w['uploadMB'] for w in websites) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             total_download = sum(w['downloadMB'] for w in websites) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             payload = { >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 'totalUploadMB': round(total_upload, 2), >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 'totalDownloadMB': round(total_download, 2), >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 'websites': websites, >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 'agentVersion': AGENT_VERSION, >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 'systemInfo': self.get_system_info() >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             } >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             headers = { >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 'Authorization': f'Bearer {self.agent_token}', >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 'Content-Type': 'application/json' >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             } >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             try: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 response = self.session.post( >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     f"{self.backend_url}/network-monitoring/logs", >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     json=payload, >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     headers=headers, >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     timeout=10, >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     verify=True >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 ) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             except: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 response = self.session.post( >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     f"{self.backend_url}/network-monitoring/logs", >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     json=payload, >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     headers=headers, >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     timeout=10, >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     verify=False >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 ) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             if response.status_code == 201: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 self.log(f"Data sent successfully: {total_upload + total_download:.2f} MB total") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 self.network_stats.clear() >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 return True >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             else: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 self.log(f"Failed to send data: {response.status_code} - {response.text}") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 return False >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         except Exception as e: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             self.log(f"Error sending data to backend: {e}") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             return False >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo     def get_system_info(self): >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         try: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             import platform >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             cpu_info = platform.processor() >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             ram_info = f"{psutil.virtual_memory().total / (1024**3):.1f} GB" >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             return { >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 'os': platform.system(), >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 'osVersion': platform.version(), >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 'cpu': cpu_info, >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 'ram': ram_info, >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 'ipAddress': self.get_local_ip(), >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 'macAddress': self.get_mac_address() >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             } >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         except Exception as e: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             self.log(f"Error getting system info: {e}") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             return {} >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo     def get_local_ip(self): >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         try: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             s.connect(("8.8.8.8", 80)) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             ip = s.getsockname()[0] >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             s.close() >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             return ip >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         except: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             return "Unknown" >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo     def get_mac_address(self): >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         try: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             import uuid >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             mac = ':'.join(['{:02x}'.format((uuid.getnode() ^>^> elements) ^& 0xff) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                            for elements in range(0, 2*6, 2)][::-1]) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             return mac >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         except: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             return "Unknown" >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo     def send_heartbeat(self): >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         if not self.agent_token: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             return >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         try: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             headers = { >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 'Authorization': f'Bearer {self.agent_token}', >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 'Content-Type': 'application/json' >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             } >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             try: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 response = self.session.post( >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     f"{self.backend_url}/network-monitoring/heartbeat", >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     headers=headers, >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     timeout=5, >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     verify=True >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 ) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             except: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 response = self.session.post( >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     f"{self.backend_url}/network-monitoring/heartbeat", >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     headers=headers, >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     timeout=5, >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     verify=False >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 ) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             if response.status_code == 200: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 self.log("Heartbeat sent successfully") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         except Exception as e: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             self.log(f"Heartbeat failed: {e}") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo     def heartbeat_loop(self): >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         while self.is_running: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             self.send_heartbeat() >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             time.sleep(HEARTBEAT_INTERVAL) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo     def run(self): >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         self.log(f"Starting IT Network Monitor Agent v{AGENT_VERSION}") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         self.log(f"System: {self.system_name} ({self.system_id})") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         heartbeat_thread = threading.Thread(target=self.heartbeat_loop, daemon=True) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         heartbeat_thread.start() >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         last_send_time = time.time() >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         try: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             while self.is_running: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 self.monitor_network_traffic() >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 if time.time() - last_send_time ^>= UPDATE_INTERVAL: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     self.send_data_to_backend() >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                     last_send_time = time.time() >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo                 time.sleep(1) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         except KeyboardInterrupt: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             self.log("Agent stopped by user") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         except Exception as e: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             self.log(f"Agent error: {e}") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         finally: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             self.is_running = False >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             self.log("Agent shutdown complete") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo     def stop(self): >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         self.is_running = False >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo def main(): >> "%INSTALL_DIR%\network_monitor_agent.py"
echo     agent = NetworkMonitorAgent() >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo     if len(sys.argv) ^> 1: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         command = sys.argv[1].lower() >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         if command == 'register' and len(sys.argv) ^> 2: >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             token = sys.argv[2] >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             agent.set_token(token) >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             print(f"Agent registered successfully!") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             print(f"System ID: {agent.system_id}") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             print(f"System Name: {agent.system_name}") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             return >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         elif command == 'status': >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             print(f"System ID: {agent.system_id}") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             print(f"System Name: {agent.system_name}") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             print(f"Token Configured: {'Yes' if agent.agent_token else 'No'}") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             print(f"Version: {AGENT_VERSION}") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             return >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo         elif command == 'test': >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             print("Running in test mode (60 seconds)...") >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             agent.run() >> "%INSTALL_DIR%\network_monitor_agent.py"
echo             return >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo     agent.run() >> "%INSTALL_DIR%\network_monitor_agent.py"
echo. >> "%INSTALL_DIR%\network_monitor_agent.py"
echo if __name__ == "__main__": >> "%INSTALL_DIR%\network_monitor_agent.py"
echo     main() >> "%INSTALL_DIR%\network_monitor_agent.py"

echo ✓ Agent file created successfully

REM Install Python dependencies
echo Installing Python dependencies...
python -m pip install psutil requests --quiet
if %errorLevel% neq 0 (
    echo ⚠ Some dependencies failed to install, but continuing...
)

echo ✓ Dependencies installation completed

REM Create scheduled task
echo Creating Windows scheduled task...
schtasks /Create /TN "ITNetworkMonitor" /TR "python \"%INSTALL_DIR%\network_monitor_agent.py\"" /SC ONLOGON /RL HIGHEST /F
if %errorLevel% neq 0 (
    echo ✗ Failed to create scheduled task
    echo You can start the agent manually by running:
    echo python "%INSTALL_DIR%\network_monitor_agent.py"
    pause
    exit /b 1
)

echo ✓ Scheduled task created successfully

REM Start the agent
echo Starting agent...
schtasks /Run /TN "ITNetworkMonitor"
if %errorLevel% neq 0 (
    echo ⚠ Task created but failed to start
    echo You can start it manually later
) else (
    echo ✓ Agent started successfully
)

echo.
echo ========================================
echo ✓ Installation completed successfully!
echo ========================================
echo.
echo The agent is now installed and will:
echo - Start automatically when Windows boots
echo - Run in the background without requiring CMD
echo - Monitor network traffic and report to the IT portal
echo.
echo Next steps:
echo 1. Open the IT Management Portal
echo 2. Go to the Employee section (Dashboard)
echo 3. Click the download button to get your registration token
echo 4. Run this command to register:
echo    python "%INSTALL_DIR%\network_monitor_agent.py" register YOUR_TOKEN_HERE
echo.
echo The agent will continue running in the background.
echo You can check its status in Task Scheduler (taskschd.msc)
echo.

echo Press any key to exit...
pause >nul


